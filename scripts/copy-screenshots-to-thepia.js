#!/usr/bin/env node

/**
 * Copy promotional screenshots to thepia.com repository
 * 
 * This script copies screenshots from the flows-db test results
 * to the thepia.com src/assets directory for promotional use.
 */

import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Paths
const FLOWS_DB_ROOT = path.resolve(__dirname, '..');
const THEPIA_COM_ROOT = '/Volumes/Projects/Thepia/thepia.com';
const SOURCE_DIR = path.join(FLOWS_DB_ROOT, 'test-results');
const TARGET_DIR = path.join(THEPIA_COM_ROOT, 'src/assets/flows-demo');

async function ensureDirectoryExists(dirPath) {
  try {
    await fs.mkdir(dirPath, { recursive: true });
    console.log(`üìÅ Created directory: ${dirPath}`);
  } catch (error) {
    if (error.code !== 'EEXIST') {
      throw error;
    }
  }
}

async function copyFile(source, target) {
  try {
    await fs.copyFile(source, target);
    console.log(`üìã Copied: ${path.basename(source)} ‚Üí ${target}`);
  } catch (error) {
    console.error(`‚ùå Failed to copy ${source}: ${error.message}`);
  }
}

async function findScreenshots(dir) {
  const screenshots = [];
  
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      
      if (entry.isDirectory()) {
        // Recursively search subdirectories
        const subScreenshots = await findScreenshots(fullPath);
        screenshots.push(...subScreenshots);
      } else if (entry.isFile() && entry.name.endsWith('.png')) {
        screenshots.push(fullPath);
      }
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è  Could not read directory ${dir}: ${error.message}`);
  }
  
  return screenshots;
}

async function generateReadme() {
  const readmePath = path.join(TARGET_DIR, 'README.md');
  const readmeContent = `# Flows Demo Screenshots

This directory contains promotional screenshots of the flows-admin-demo application, automatically generated by the flows-db repository's Playwright tests.

## Directory Structure

- \`desktop/\` - High-resolution desktop screenshots (1920x1080)
- \`tablet/\` - Tablet screenshots (1024x768, 2x scale)

## Screenshots Include

- **Dashboard Overview** - Main dashboard with metrics and overview
- **Employee Management** - Employee list and detail views
- **Invitation Management** - Invitation creation and management interface
- **Client Switching** - Multi-client branding demonstration
- **Tablet Views** - Responsive tablet interface optimized for admin workflows
- **Branding Showcase** - Different client branding examples

## Regenerating Screenshots

To update these screenshots:

1. Navigate to the flows-db repository
2. Run \`pnpm demo:screenshots\` for desktop screenshots
3. Run \`pnpm demo:screenshots:all\` for all device types
4. Screenshots are automatically saved to this directory

## Usage in Components

These screenshots can be used in:
- Marketing pages
- Product showcases
- Documentation
- Promotional materials

Example usage:
\`\`\`astro
---
import { Image } from 'astro:assets';
import dashboardScreenshot from '~/assets/flows-demo/desktop/dashboard-overview.png';
---

<Image src={dashboardScreenshot} alt="Flows Admin Dashboard" />
\`\`\`

Last updated: ${new Date().toISOString()}
`;

  try {
    await fs.writeFile(readmePath, readmeContent);
    console.log(`üìù Generated README: ${readmePath}`);
  } catch (error) {
    console.error(`‚ùå Failed to generate README: ${error.message}`);
  }
}

// Main execution
async function main() {
  try {
    console.log('üöÄ Starting screenshot organization...');
    console.log(`üìÇ Target: ${TARGET_DIR}`);
    
    // Ensure target directories exist
    await ensureDirectoryExists(TARGET_DIR);
    await ensureDirectoryExists(path.join(TARGET_DIR, 'desktop'));
    await ensureDirectoryExists(path.join(TARGET_DIR, 'tablet'));
    
    // Generate README
    await generateReadme();
    
    console.log('‚úÖ Screenshot organization completed!');
    console.log(`üìÅ Screenshots available in: ${TARGET_DIR}`);
    console.log('üéâ All done!');
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

main();
